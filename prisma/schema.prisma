// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id          String   @id @default(uuid())
  username    String?
  passHash    String?
  menu        Json?
  role        String   @default("user")
  active      Boolean  @default(true)
  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patients       patients[]
  encounters     encounters[]
  drugsInventory drugsInventory[]
  stocksHistory  stocksHistory[]
  drugPurchases  drugPurchases[]
  transactions   transaction[]
  reciepts       reciept[]
  payments       payment[]
}

model patients {
  id           String        @id @default(cuid())
  hosp_no      String
  no           Int?
  year         Int?
  month        String?
  name         String?
  sex          String?
  age          String?
  occupation   String?
  religion     String?
  phone_no     String?
  reg_date     DateTime?
  createdById  String?
  updatedById  String?
  updatedBy    accounts?     @relation(fields: [updatedById], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  encounters   encounters[]
  transactions transaction[]
  group_id     String?
  groups       groups?       @relation(fields: [group_id], references: [id])
  townId       String?
  town         town?         @relation(fields: [townId], references: [id])
}

model encounters {
  id               String             @id @default(uuid())
  patient_id       String?
  patient          patients?          @relation(fields: [patient_id], references: [id])
  year             Int?
  month            String?
  enc_date         DateTime?          @default(now())
  time             String?
  admitted         Boolean            @default(false)
  outcome          String?
  care_id          String?
  care             care?              @relation(fields: [care_id], references: [id])
  drugsGiven       drugsGiven[]
  prescriptionHist prescriptionHist[]
  labTest          labTest[]
  diagnosis        diagnosis[]
  delivery         delivery[]
  follow_ups       followups[]
  operations       operations[]
  createdById      String?
  updatedById      String?
  updatedBy        accounts?          @relation(fields: [updatedById], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  anc              anc[]
  immunization     immunization[]
  admission        admission?
}

model followups {
  id           String      @id @default(cuid())
  encounter_id String?
  encounter    encounters? @relation(fields: [encounter_id], references: [id])
  year         Int?
  month        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model immunization {
  id           String      @id @default(cuid())
  encounter_id String?
  encounter    encounters? @relation(fields: [encounter_id], references: [id])
  type         String?
  date         DateTime?
  next_date    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model admission {
  id            String      @id @default(cuid())
  encounter_id  String?     @unique
  encounter     encounters? @relation(fields: [encounter_id], references: [id])
  adm_date      DateTime?
  admitted_for  Int?
  discharged_on DateTime?
  nok_phone     String?
  ward_matron   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model anc {
  id             String      @id @default(cuid())
  encounter_id   String?
  encounter      encounters? @relation(fields: [encounter_id], references: [id])
  ega            String?
  fe_no          String?
  fe_liq_vol     String?
  fe_abnormality String?
  fe_diagnosis   String?
  fe_live        String?
  placenta_pos   String?
  date           DateTime    @default(now())
  edd            DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model delivery {
  id                String      @id @default(uuid())
  encounter_id      String?
  encounter         encounters? @relation(fields: [encounter_id], references: [id])
  parity            String?
  mother_diag       String?
  mother_outcome    String?
  labour_duration   String?
  delivery_date     DateTime?   @default(now())
  delivery_type     String?
  placenta_delivery String?
  apgar_score       String?
  baby_maturity     String?
  baby_weight       String?
  baby_sex          String?
  baby_outcome      String?
  congenital_no     Int?
  midwife           String?
  year              Int?
  month             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model drugsGiven {
  id               String             @id @default(cuid())
  rate             Int?               @default(0)
  price            Int?               @default(0)
  quantity         Int?               @default(0)
  drug_id          String?
  drug             drugsInventory?    @relation(fields: [drug_id], references: [id])
  name             String?
  encounter_id     String?
  encounter        encounters?        @relation(fields: [encounter_id], references: [id])
  date             DateTime           @default(now())
  year             Int?
  month            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  prescriptionHist prescriptionHist[]

  @@map("drugsgiven")
}

model operations {
  id           String      @id @default(cuid())
  encounter_id String?
  encounter    encounters? @relation(fields: [encounter_id], references: [id])
  procedureId  String?
  procedure    procedures? @relation(fields: [procedureId], references: [id])
  proc_date    DateTime    @default(now())
  surgeon      String?
  assistant    String?
  outcome      String?
  anaesthesia  String?
  year         Int?
  month        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model labTest {
  id           String      @id @default(cuid())
  encounter_id String?
  encounter    encounters? @relation(fields: [encounter_id], references: [id])
  test_id      String
  testType     tests       @relation(fields: [test_id], references: [id])
  result       String?
  rate         Int?
  info         String?
  date         DateTime    @default(now())
  year         Int?
  month        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("labtest")
}

model transaction {
  id          String    @id
  items       tnxItem[]
  total       Int
  balance     Int
  year        Int
  month       String
  status      String
  createdById String?
  updatedById String?
  updatedBy   accounts? @relation(fields: [updatedById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  patientId   String?
  patient     patients? @relation(fields: [patientId], references: [id])
  reciepts    reciept[]
  payments    payment[]
}

model tnxItem {
  id            String      @id @default(uuid())
  transactionId String
  transaction   transaction @relation(fields: [transactionId], references: [id])
  feeId         String
  fee           fees        @relation(fields: [feeId], references: [id])
  price         Int
  paid          Int
  balance       Int
  active        Boolean     @default(true)
  year          Int?
  month         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  payments      payment[]

  @@map("tnxitem")
}

model payment {
  id          String       @id @default(uuid())
  tnxId       String?
  transaction transaction? @relation(fields: [tnxId], references: [id])
  itemId      String
  tnxItem     tnxItem      @relation(fields: [itemId], references: [id])
  name        String
  paid        Int
  method      String?
  createdById String?
  createdBy   accounts?    @relation(fields: [createdById], references: [id])
  type        String       @default("payment")
  year        Int?
  month       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model reciept {
  id          String      @id
  items       Json
  tnxId       String
  transaction transaction @relation(fields: [tnxId], references: [id])
  year        Int
  month       String
  status      String
  createdById String?
  createdBy   accounts?   @relation(fields: [createdById], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model snapshot {
  id        String   @id @default(uuid())
  type      String?
  data      Json?
  year      Int?
  month     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model drugsInventory {
  id            String          @id @default(uuid())
  stock_qty     Int             @default(0)
  added         Int?            @default(0)
  rate          Int?            @default(0)
  createdById   String?
  updatedById   String?
  updatedBy     accounts?       @relation(fields: [updatedById], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  givenHistory  drugsGiven[]
  stockHistory  stocksHistory[]
  drugPurchases drugPurchases[]
  drugId        String          @unique
  drug          drugs?          @relation(fields: [drugId], references: [id])

  @@map("drugsinventory")
}

model prescriptionHist {
  id           Int         @id @default(autoincrement())
  drug         String
  hosp_no      String
  quantity     Int
  rate         Int?        @default(0)
  price        Int?        @default(0)
  stock_remain Int?
  month        String?
  date         DateTime    @default(now())
  time         String?
  year         Int?
  given_id     String?
  given        drugsGiven? @relation(fields: [given_id], references: [id])
  enc_id       String?
  encounter    encounters? @relation(fields: [enc_id], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("prescriptionhist")
}

model stocksHistory {
  id          Int             @id @default(autoincrement())
  drug_id     String?
  drug        drugsInventory? @relation(fields: [drug_id], references: [id])
  name        String?
  type        String?
  stock_qty   Int?
  added       Int?
  month       String?
  year        Int?
  updatedById String?
  updatedBy   accounts?       @relation(fields: [updatedById], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("stockshistory")
}

model drugPurchases {
  id          String          @id @default(uuid())
  drug_id     String?
  drug        drugsInventory? @relation(fields: [drug_id], references: [id])
  name        String?
  quantity    Int?
  price       Int?
  month       String?
  time        String?
  year        Int?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String?
  createdBy   accounts?       @relation(fields: [createdById], references: [id])

  @@map("drugpurchases")
}

model drugs {
  id        String          @id @default(cuid())
  name      String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  inventory drugsInventory?
}

model diagnosis {
  id         String       @id @default(cuid())
  name       String?
  createdAt  DateTime     @default(now())
  encounters encounters[]
}

model town {
  id        String     @id @default(cuid())
  name      String?
  createdAt DateTime   @default(now())
  patienst  patients[]
}

model tests {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now())
  labTests  labTest[]
}

model procedures {
  id         String       @id @default(cuid())
  name       String?
  createdAt  DateTime     @default(now())
  operations operations[]
}

model fees {
  id        String    @id @default(cuid())
  name      String?
  amount    Int?
  createdAt DateTime  @default(now())
  tnxItems  tnxItem[]
}

model care {
  id         String       @id @default(cuid())
  name       String
  createdAt  DateTime     @default(now())
  encounters encounters[]
}

model groups {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  patients  patients[]
}
